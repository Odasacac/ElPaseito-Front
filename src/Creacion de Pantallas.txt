¿Cómo crear pantallas?

1 - Determinar qué tipo de pantalla será:

- Capítulo: Título del capítulo que va a empezar.
- Alone: Pantalla que sólo lleva a una pantalla.
- Bifurcación: Da a elegir dos o más opciones.
- Decisión: Si o no a avanzar, no hay opciones, o se sigue o no, y la consecuencia del no ya dependerá de la pantalla.
- Desvío: Posibilidad de desviarse, es como una bifurcación, pero se desconoce la opción alternativa al desvío.
- Video: Pantalla de video.

2 - Crear el componente

    ng g c componentes/pantallas/pantallas/pantalla-23

3 - Customizar el componente

    Las pantallas son en esencia similares, solo varían pequeños aspectos en función del tipo de pantalla.

    3.1 - Partes comunes

        Todas las pantallas tienen esta estructura en el TypeScript:

            pantallasService = inject(PantallasService);

            pantallaActual: Number = 1;

            ngOnInit()
            {
                if(this.pantallasService.prepararPantalla(this.pantallaActual))
                {
                    this.prepararPantalla();
                }
            }

            prepararPantalla()
            {}
        
        Lo que ocurre en el ngOnInit es que se evalua si la pantalla actual ha sido habilitada.
        Si lo ha sido, se permite mostrar las pantallas y se setea esta pantalla como pantalla activa, además, se ejecuta el prepararPantalla() de la propia pantalla
        Si no lo ha sido, se mostrará Ruta No Permitida en el MainComponent

    3.2 - Partes dependientes

        Con esto me refiero a que, dependiendo de qué tipo de pantalla es la pantalla actual, necesitará setear una serie de valores:

        3.2.1 - Alone

            Si la pantalla es Alone, hay que setear en el TypeScript de la pantalla la ruta de la imagen y los textos:

                prepararPantalla()
                {
                    //SETTEAR RUTA IMAGEN
                    this.pantallasService.setRutaImagen("/images/1/1.jpg");
    
                    //SETTEAR TEXTOS
                    const paraTexto: String []=[];
                    const linea1: String = "Sin darte cuenta te encuentras en este lugar."
                    paraTexto.push(linea1);
                    const linea2: String = "Saliste pronto de trabajar y decidiste dar un paseo por la montaña."
                    paraTexto.push(linea2);
                    const linea3: String = "Tu objetivo era y sigue siendo ver un atardecer bonito desde un lugar cómodo."
                    paraTexto.push(linea3);
                    const linea4: String = "No es tarde, pero tampoco tienes todo el tiempo del mundo."
                    paraTexto.push(linea4);
    
                    this.pantallasService.setTextos(paraTexto);
                }

            Y en el HTML del componente hay que añadir <app-alone></app-alone>

            Además, en el propio AloneComponent, hay que añadir un case nuevo en el método siguiente().

            Este método evalúa cuál es la pantalla actual y en función de la que sea habilitará e irá a la siguiente pantalla correspondiente.

            siguiente()
            {
                let pantallaActiva = this.pantallasService.getPantallaActiva()();

                switch (pantallaActiva)
                {

                    ...

                    case X:
                    this.irAPantallaB();
                    break;

                    ...

                }
            }


            irAPantallaB()
            {
                this.pantallasService.resetPantalla(A);
                this.pantallasService.setPantalla(B);
                this.router.navigate(['/game/B']);
            }
            

        3.2.2 - Bifurcación 

            Si la pantalla es Bifurcación, hay que setear en el TypeScript de la pantalla las rutas de las imágenes a mostrar:

                prepararPantalla()
                {
                    //SETTEAR RUTA IMAGENES
                    const rutasImagenes: String[]=[];
                    const rutaImagen1: String = "/images/1/2.jpg";
                    rutasImagenes.push(rutaImagen1);
                    const rutaImagen2: String = "/images/1/1.jpg";
                    rutasImagenes.push(rutaImagen2);
                    this.pantallasService.setRutasParaBifurcacion(rutasImagenes);
                }

            Y en el HTML del componente hay que añadir <app-bifurcacion></app-bifurcacion>

            Además, en el propio BifurcacionComponent, hay que añadir un nuevo case en el método clickEn().
            Primero se filtra por la pantalla activa y luego segun esa pantalla se indican las posibilidades.

                clickEn(indice: Number)
                {
                    let pantallaActiva = this.pantallasService.getPantallaActiva()();

                    switch (pantallaActiva)
                    {
                        ...

                        case A:
                        this.seleccionEnPantallaA();
                        break;

                        ...

                    }

                }

                
                seleccionEnPantallaA(imagen: Number)
                {
                    this.pantallasService.resetPantalla(A);

                    switch (imagen)
                    {
                        case 0:
                        this.irAPantallaRendirse();
                        break;

                        case 1:
                        this.irAPantallaB();
                        break; 
                    
                        default:
                        this.irARutaNoPermitida(); 
                        break;
                    }
                }


                 irAPantallaB()
                {
                    this.pantallasService.setPantalla(B);
                    this.router.navigate(['/game/B']);
                }

            Se pueden ir a otras Pantallas, no solo a una del listado:

                this.irANotDefined(); Cuando aun no se haya creado esa Pantalla
                this.irARutaNoPermitida(); Cuando la Pantalla no esté Permitida y/o por defecto
                this.irAPantallaRendirse(); Cuando sea para rendirse


        3.2.3 - Desvio

            Si la pantalla es Desvío, hay que setear en el TypeScript de la pantalla la ruta de la imagen, los textos y las opciones:

                prepararPantalla()
                {
                    //SETTEAR RUTA IMAGEN
                    this.pantallasService.setRutaImagen("/images/1/6.jpg");
    
                    //SETTEAR TEXTOS
                    const paraTexto: String []=[];
                    const linea1: String = "En un momento, ves entre los árboles una pequeña cabaña hecha de hojas y ramas secas."
                    paraTexto.push(linea1);
                    const linea2: String = "Te preguntas si es buena idea acercarse a mirar."
                    paraTexto.push(linea2);
                    this.pantallasService.setTextos(paraTexto);

                    //SETTEAR OPCIONES
                    const paraOpciones: String []=[];
                    const opcion1: String = "Prefiero seguir el camino"
                    paraOpciones.push(opcion1);
                    const opcion2: String = "Me acerco a mirar"
                    paraOpciones.push(opcion2);
                    this.pantallasService.setOpcionesDesvio(paraOpciones);

                }

            Y en el HTML del componente hay que añadir <app-desvio></app-desvio>
            
            Además, en el DesvioComponent hay que añadir un nuevo case en el método clickEn().
            Primero se filtra por la pantalla activa y luego segun esa pantalla se indican las posibilidades.


                clickEn(indice: Number)
                {
                    let pantallaActiva = this.pantallasService.getPantallaActiva()();

                    switch (pantallaActiva)
                    {
                        ...

                        case A:
                        this.seleccionEnPantallaA(indice);
                        break;

                        ...
                    }
                }


                seleccionEnPantallaA(imagen: Number)
                {
                    this.pantallasService.resetPantalla(A);

                    switch (imagen)
                    {
                        case 0:
                        this.irAPantallaB();
                        break;

                        case 1: 
                        this.irAPantallaC();
                        break;

                        default:
                        this.irARutaNoPermitida();
                        break;
                    }
                }

                irAPantallaB()
                {
                    this.pantallasService.setPantalla(B);
                    this.router.navigate(['/game/B']);
                }
 
        3.2.4 - Decision

            Si la pantalla es Decision, hay que setear en el TypeScript de la pantalla la ruta de la imagen y los textos:

                prepararPantalla()
                {
                    //SETTEAR RUTA IMAGEN
                    this.pantallasService.setRutaImagen("/images/1/8.jpg");
    
                    //SETTEAR TEXTOS
                    const paraTexto: String []=[];
                    const linea1: String = "Te acercas a mirar."
                    paraTexto.push(linea1);
                    const linea2: String = "Es una cabaña hecha de ramas secas, bastante envuelta de matorrales."
                    paraTexto.push(linea2);
                    const linea3: String = "No hay nada reseñable, excepto lo que parece un camino al fondo."
                    paraTexto.push(linea3);
                    this.pantallasService.setTextos(paraTexto);
                }

            Y en el HTML del componente hay que añadir <app-decision></app-decision>

            Además, en el DecisionComponent, hay que añadir los cases para los métodos clickEnSI() y clickEnNo().

                clickEnSi()
                {
                    switch (this.pantallaActiva)
                    {
                        ...

                        case X:
                        this.pantallasService.resetPantalla(X);
                        this.irAPantallaA();
                        break;
   
                        ...
                    }
                }

                clickEnNo()
                {
                    switch (this.pantallaActiva)
                    {
                        ...

                        case X:
                        this.pantallasService.resetPantalla(X);
                        this.irAPantallaB();
                        break;
   
                        ...
                    }
                }
  
                irAPantallaB()
                {
                    this.pantallasService.setPantalla(B);
                    this.router.navigate(['/game/B']);
                }



        3.2.5 - Capitulo - Ejemplo: Pantalla 4

            Si la pantalla es Capitulo, hay que setear en el TypeScript de la pantalla el nombre del capítulo:

                prepararPantalla()
                {
                    this.pantallasService.setNumeroCapitulo(1);
                    this.pantallasService.setNombreCapitulo("La vida se abre paso");
                }

            Y en el HTML del componente hay que añadir <app-capitulo></app-capitulo>

            Además, en el CapituloComponent, hay que añadir los cases en el método siguiente().

            siguiente()
            {
                let pantallaActiva = this.pantallasService.getPantallaActiva()();

                switch (pantallaActiva)
                {

                    ...

                    case A:
                    this.irAPantallaB();
                    break;

                    ...

                }
            }


            irAPantallaY()
            {
                this.pantallasService.resetPantalla(A);
                this.pantallasService.setPantalla(B);
                this.router.navigate(['/game/B']);
            }
            

        3.2.6 - Video - Ejemplo: Pantalla 18

            Si la pantalla es Video, hay que setear en el TypeScript de la pantalla la ruta del video:

                prepararPantalla()
                {
                    //SETTEAR RUTA VIDEO
                    this.pantallasService.setRutaVideo("/videos/17.mp4");
                }

            Y en el HTML del componente hay que añadir <app-video></app-video>

            Además, en el VideoComponent, hay que añadir los cases en el método siguiente().

            siguiente()
            {
                let pantallaActiva = this.pantallasService.getPantallaActiva()();

                switch (pantallaActiva)
                {

                    ...

                    case A:
                    this.irAPantallaB();
                    break;

                    ...

                }
            }


            irAPantallaY()
            {
                this.pantallasService.resetPantalla(A);
                this.pantallasService.setPantalla(B);
                this.router.navigate(['/game/B']);
            }
            

    3.3 - Guardar Partida

        En la última Pantalla de un capítulo, se intentará guardar la partida, para ello simplemente hay que añadir en ngOnInit de la pantalla:

            this.pantallasService.guardarPartida();

        Por ejemplo:

            ngOnInit()
            {
                if(this.pantallasService.prepararPantalla(this.pantallaActual))
                {
                    this.prepararPantalla();
                    this.pantallasService.guardarPartida();
                }
            }

        Y ya esto intentará guardar la partida, si la guarda bien, si no la guarda bien también.

4 - Añadir esa Pantalla a los métodos getPantalla(), setPantalla() y resetPantalla() del PantallasService.

5 - Añadir esa Pantalla al app-routes.
            
            